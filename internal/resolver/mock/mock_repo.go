// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/repository.go -destination=internal/resolver/mock/mock_repo.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/StonerF/posts/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockRepository) CreateComment(authorID, postID, content string) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", authorID, postID, content)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockRepositoryMockRecorder) CreateComment(authorID, postID, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockRepository)(nil).CreateComment), authorID, postID, content)
}

// CreatePost mocks base method.
func (m *MockRepository) CreatePost(authorID, title, content string, allowComments bool) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", authorID, title, content, allowComments)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockRepositoryMockRecorder) CreatePost(authorID, title, content, allowComments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockRepository)(nil).CreatePost), authorID, title, content, allowComments)
}

// CreateReply mocks base method.
func (m *MockRepository) CreateReply(authorID, postID, content string, parentID *string) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReply", authorID, postID, content, parentID)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReply indicates an expected call of CreateReply.
func (mr *MockRepositoryMockRecorder) CreateReply(authorID, postID, content, parentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReply", reflect.TypeOf((*MockRepository)(nil).CreateReply), authorID, postID, content, parentID)
}

// GetComments mocks base method.
func (m *MockRepository) GetComments(postID string, limit int, after *string) (*model.CommentConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", postID, limit, after)
	ret0, _ := ret[0].(*model.CommentConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockRepositoryMockRecorder) GetComments(postID, limit, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockRepository)(nil).GetComments), postID, limit, after)
}

// GetPostByID mocks base method.
func (m *MockRepository) GetPostByID(id string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockRepositoryMockRecorder) GetPostByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockRepository)(nil).GetPostByID), id)
}

// GetPosts mocks base method.
func (m *MockRepository) GetPosts(limit int, after *string) (*model.PostConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", limit, after)
	ret0, _ := ret[0].(*model.PostConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockRepositoryMockRecorder) GetPosts(limit, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockRepository)(nil).GetPosts), limit, after)
}

// GetRepliesByCommentID mocks base method.
func (m *MockRepository) GetRepliesByCommentID(commentID string, limit int, after *string) (*model.CommentConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesByCommentID", commentID, limit, after)
	ret0, _ := ret[0].(*model.CommentConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesByCommentID indicates an expected call of GetRepliesByCommentID.
func (mr *MockRepositoryMockRecorder) GetRepliesByCommentID(commentID, limit, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesByCommentID", reflect.TypeOf((*MockRepository)(nil).GetRepliesByCommentID), commentID, limit, after)
}
